악의적인 노드

블록체인은 
	거대한 분산 공개 장부이며, 그 장부 안에 포함된 개별 거래는 모두 디지털 서명이 붙어 있어서
	은행이나 다른 제3자의 개입이 없어도 진본임을 보증할 수 있다
	
	수천, 수만 노드에 분산 되어 있어서 어느 한 지점에 장애나 공격이 발생하더라도 블록 체인이라는 
	네트워크 전체는 문제 없이 계속 돌아갈 수 있다.

	작업 증명이라는 수학적 계산 작업과 경제 관점에서의 논리를 통해 위/변조가 사실상 불가능한 
	구조를 갖게 되어, 그 안에 기록된 거래들은 은행같은 중앙의 보증 기관이 없어도 신뢰할 수 있는
	거래로서 확정될 수 있다
	
	분산 환경에 전파되는 과정에서 분기가 발생할 수 있으나, 가장 길이가 긴 블록 체인을 유효한 블록 
	체인으로 선택한다.


중앙 기관을 필요로 하지 않는 탈중앙화(Decentralization)을 달성함
비트코인은 화폐에 가치를 두고 있지만, 이더, EOS, IOTA 등은 블록체인 위에서 당사자간의 계약을 
프로그램으로 실행시킬 수 있는 탈중앙화 플랫폼 지향

DAPP = Decentralized Application / 탈중앙화된 어플리케이션

아이폰 = 이더, 퀀텀 등등
각종 어플 = DAPP

ETHER기반 DAPP 코인 = ETHER 위에서 작동하는 어플


솔리디티

address
struct
function
contract
uint:  uint = uint256
event
mapping => 구조화된 데이터를 저장하 것, struct와 array와는 다름
	   key - value 저장소를 말함. 데이터의 검색과 저장이 가능
 	   ex) mapping (address -> uint) test;    address는 key, uint는 value
keccak256
view
is
modifier


함수 접근 제어자 
internal : 함수가 정의된 컨트랙트를 상속하는 컨트랙트에서도 접근 가능 => 이 기능을 뺀다면 private와 동일
external : 함수가 컨트랙트 바깥에서만 호출될 수 있고 컨트랙트 내의 다른 함수에 의해 호출 될 수 없음 => 이 기능을 뺀다면 public

interface : contract를 정의하는 것과 유사하다.
	    contract선언을 하고 이름에 Interface를 넣는 법칙이 있다. ex)contract seoInterface
	    다른 contrat와 상호작용을 하고자 하는 함수만을 선언함. 다른 함수나 상태 변수 언급x
	    함수 몸체를 정의하지 않는다. 중괄호 {,}를 쓰지 않고 함수 선언을 세미콜론으로 간단하게 끝냄
	    => contract의 뼈대와 같음, DAPP코드에 interface를 포함하면 contract는 다른 contract에 정의된
	       함수의 특성, 호출 방법, 예상되는 응답 내용을 알 수 있음.


솔리디티에서는 함수가 하나 이상의 값을 반환할 수 있다.


msg.sender : 솔리디티의 전역변수. 현재 함수를 호출한 사람(계정 주소)를 가리킨다
	     mapping을 이용해 계정 주소를 저장할 수 있다.


onlyOwner: 오직 컨트랙트의 소유자만이 해당 함수를 호출할 수 있음


require : 특정 조건에 행당하는 값이 참이 아닌 경우 error를 발생 시킨다.


그러니 잘 기억하게. 이더리움에서 돌아가는 DApp이라고 해서 그것만으로 분산화되어 있다고 할 수는 없네. 
반드시 전체 소스 코드를 읽어보고, 자네가 잠재적으로 걱정할 만한, 소유자에 의한 특별한 제어가 불가능한 상태인지 확인하게.
 개발자로서는 자네가 잠재적인 버그를 수정하고 DApp을 안정적으로 유지하도록 하는 것과, 
사용자들이 그들의 데이터를 믿고 저장할 수 있는 소유자가 없는 플랫폼을 만드는 것 사이에서 균형을 잘 잡는 것이 중요하네.
